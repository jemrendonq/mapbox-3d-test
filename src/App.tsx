/* 3D map + satellite view + buildings extrusion + terrain extrusion */
// import { useEffect, useRef } from 'react';
// import mapboxgl from 'mapbox-gl';

// import 'mapbox-gl/dist/mapbox-gl.css';

// const MapComponent = () => {
//   const mapContainer = useRef<HTMLDivElement | null>(null);
//   const mapRef = useRef<mapboxgl.Map | null>(null);

//   useEffect(() => {

//     mapboxgl.accessToken = 'pk.eyJ1IjoicmtlZyIsImEiOiJjbWJwa3Q4dmwwNjZyMmtxNG4zZHpub21xIn0.5IQ061SZLu_F4_ptyu-Sbg';

//     if (!mapContainer.current) return;

//     mapRef.current = new mapboxgl.Map({
//       container: mapContainer.current,
//       style: 'mapbox://styles/mapbox/satellite-streets-v12',
//       center: [-74.006, 40.7128],
//       zoom: 15.5,
//       pitch: 45,
//       bearing: -17.6
//     });

//     mapRef.current.addControl(new mapboxgl.NavigationControl(), 'bottom-right');

//     mapRef.current.on('load', () => {
//       if (!mapRef.current) return;
      
//       mapRef.current.addLayer({
//         id: 'add-3d-buildings',
//         source: 'composite',
//         'source-layer': 'building',
//         filter: ['==', 'extrude', 'true'],
//         type: 'fill-extrusion',
//         minzoom: 15,
//         paint: {
//           'fill-extrusion-color': '#aaa',
//           'fill-extrusion-height': [
//             'interpolate',
//             ['linear'],
//             ['zoom'],
//             15, 0,
//             15.05, ['get', 'height']
//           ],
//           'fill-extrusion-base': [
//             'interpolate',
//             ['linear'],
//             ['zoom'],
//             15, 0,
//             15.05, ['get', 'min_height']
//           ],
//           'fill-extrusion-opacity': 0.7
//         }
//       });
//     });

//     mapRef.current.on('style.load', () => {
//       if (!mapRef.current) return;

//       mapRef.current.addSource('mapbox-dem', {
//         type: 'raster-dem',
//         url: 'mapbox://mapbox.mapbox-terrain-dem-v1',
//         tileSize: 512,
//         maxzoom: 14
//       });
//       mapRef.current.setTerrain({ source: 'mapbox-dem', exaggeration: 1.5 });
//     });

//     return () => mapRef.current?.remove();
//   }, []);

//   return <div ref={mapContainer} style={{ height: '100%', width: '100%' }} />;
// };

// export default MapComponent;

/* 3D map + normal map view + buildings extrusion + terrain extrusion */
// import { useEffect, useRef } from 'react';
// import mapboxgl from 'mapbox-gl';

// import 'mapbox-gl/dist/mapbox-gl.css';

// const MapComponent = () => {
//   const mapContainer = useRef<HTMLDivElement | null>(null);
//   const mapRef = useRef<mapboxgl.Map | null>(null);

//   useEffect(() => {

//     mapboxgl.accessToken = 'pk.eyJ1IjoicmtlZyIsImEiOiJjbWJwa3Q4dmwwNjZyMmtxNG4zZHpub21xIn0.5IQ061SZLu_F4_ptyu-Sbg';

//     if (!mapContainer.current) return;

//     mapRef.current = new mapboxgl.Map({
//       container: mapContainer.current,
//       style: 'mapbox://styles/mapbox/standard',
//       center: [-74.006, 40.7128],
//       zoom: 15.5,
//       pitch: 45,
//       bearing: -17.6
//     });

//     mapRef.current.addControl(new mapboxgl.NavigationControl(), 'bottom-right');

//     mapRef.current.on('load', () => {
//       if (!mapRef.current) return;
      
//       mapRef.current.addLayer({
//         id: 'add-3d-buildings',
//         source: 'composite',
//         'source-layer': 'building',
//         filter: ['==', 'extrude', 'true'],
//         type: 'fill-extrusion',
//         minzoom: 15,
//         paint: {
//           'fill-extrusion-color': '#aaa',
//           'fill-extrusion-height': [
//             'interpolate',
//             ['linear'],
//             ['zoom'],
//             15, 0,
//             15.05, ['get', 'height']
//           ],
//           'fill-extrusion-base': [
//             'interpolate',
//             ['linear'],
//             ['zoom'],
//             15, 0,
//             15.05, ['get', 'min_height']
//           ],
//           'fill-extrusion-opacity': 0.7
//         }
//       });
//     });

//     mapRef.current.on('style.load', () => {
//       if (!mapRef.current) return;

//       mapRef.current.addSource('mapbox-dem', {
//         type: 'raster-dem',
//         url: 'mapbox://mapbox.mapbox-terrain-dem-v1',
//         tileSize: 512,
//         maxzoom: 14
//       });
//       mapRef.current.setTerrain({ source: 'mapbox-dem', exaggeration: 1.5 });
//     });

//     return () => mapRef.current?.remove();
//   }, []);

//   return <div ref={mapContainer} style={{ height: '100%', width: '100%' }} />;
// };

// export default MapComponent;

/* 3D map + toggle between satellite and standard view + buildings extrusion + terrain extrusion */
// import { useEffect, useRef, useState } from 'react';
// import mapboxgl from 'mapbox-gl';

// import 'mapbox-gl/dist/mapbox-gl.css';

// const MapComponent = () => {
//   const mapContainer = useRef<HTMLDivElement | null>(null);
//   const mapRef = useRef<mapboxgl.Map | null>(null);
//   const [isStandardStyle, setIsStandardStyle] = useState(true);

//   // Function to add 3D buildings
//   const add3DBuildings = () => {
//     if (!mapRef.current) return;
    
//     mapRef.current.addLayer({
//       id: 'add-3d-buildings',
//       source: 'composite',
//       'source-layer': 'building',
//       filter: ['==', 'extrude', 'true'],
//       type: 'fill-extrusion',
//       minzoom: 15,
//       paint: {
//         'fill-extrusion-color': '#aaa',
//         'fill-extrusion-height': [
//           'interpolate',
//           ['linear'],
//           ['zoom'],
//           15, 0,
//           15.05, ['get', 'height']
//         ],
//         'fill-extrusion-base': [
//           'interpolate',
//           ['linear'],
//           ['zoom'],
//           15, 0,
//           15.05, ['get', 'min_height']
//         ],
//         'fill-extrusion-opacity': 0.7
//       }
//     });
//   };

//   // Function to add terrain
//   const addTerrain = () => {
//     if (!mapRef.current) return;

//     mapRef.current.addSource('mapbox-dem', {
//       type: 'raster-dem',
//       url: 'mapbox://mapbox.mapbox-terrain-dem-v1',
//       tileSize: 512,
//       maxzoom: 14
//     });
//     mapRef.current.setTerrain({ source: 'mapbox-dem', exaggeration: 1.5 });
//   };

//   useEffect(() => {
//     mapboxgl.accessToken = 'pk.eyJ1IjoicmtlZyIsImEiOiJjbWJwa3Q4dmwwNjZyMmtxNG4zZHpub21xIn0.5IQ061SZLu_F4_ptyu-Sbg';

//     if (!mapContainer.current) return;

//     mapRef.current = new mapboxgl.Map({
//       container: mapContainer.current,
//       style: 'mapbox://styles/mapbox/standard',
//       center: [-74.006, 40.7128],
//       zoom: 15.5,
//       pitch: 45,
//       bearing: -17.6
//     });

//     mapRef.current.addControl(new mapboxgl.NavigationControl(), 'bottom-right');

//     // Handle initial load
//     mapRef.current.on('load', () => {
//       add3DBuildings();
//     });

//     // Handle style changes (this fires every time setStyle is called)
//     mapRef.current.on('style.load', () => {
//       addTerrain();
//       add3DBuildings();
//     });

//     return () => mapRef.current?.remove();
//   }, []);

//   const toggleMapStyle = () => {
//     if (!mapRef.current) return;
    
//     const newStyle = isStandardStyle 
//       ? 'mapbox://styles/mapbox/satellite-streets-v12' 
//       : 'mapbox://styles/mapbox/standard';
    
//     mapRef.current.setStyle(newStyle);
//     setIsStandardStyle(!isStandardStyle);
//   };

//   return (
//     <div style={{ position: 'relative', height: '100%', width: '100%' }}>
//       <div ref={mapContainer} style={{ height: '100%', width: '100%' }} />
//       <button 
//         onClick={toggleMapStyle}
//         style={{ position: 'absolute', top: '10px', left: '10px', zIndex: 1 }}
//       >
//         {isStandardStyle ? 'Satellite' : 'Standard'}
//       </button>
//     </div>
//   );
// };

// export default MapComponent;

/* 3D map + toggle between satellite and standard view + buildings extrusion + terrain extrusion + TODO: 3D line route */
// import { useEffect, useRef, useState } from 'react';
// import mapboxgl from 'mapbox-gl';

// import 'mapbox-gl/dist/mapbox-gl.css';

// const elevations = [738.189, 754.593, 757.874, 734.908, 2949.475, 7762.467, 12004.594, 15902.231, 20118.111, 23802.494, 27877.297, 32598.426, 32322.836, 32831.366, 33280.841, 33835.303, 34379.922, 34917.98, 36046.589, 36676.51, 37293.308, 38054.463, 38848.426, 39543.965, 40249.345, 40898.951, 41499.345, 42089.896, 43700.789, 44353.676, 45754.595, 46479.66, 47201.445, 47870.736, 49064.962, 49665.356, 50318.243, 50994.096, 51699.477, 52378.611, 53005.251, 53694.227, 54379.923, 55154.201, 55898.952, 56646.983, 57306.432, 57982.285, 58736.879, 59452.102, 61217.194, 61902.889, 62929.792, 63645.015, 64356.957, 65049.215, 65738.191, 66446.853, 67526.249, 68290.685, 70662.732, 71394.359, 72122.706, 72854.333, 73585.96, 74324.149, 75098.428, 75869.425, 76607.614, 77372.05, 79235.567, 79954.071, 80695.541, 81492.785, 82273.625, 82985.567, 84452.102, 85252.627, 86348.428, 87106.302, 88674.544, 89461.945, 91030.187, 91804.465, 98018.376, 98736.88, 100492.129, 101184.386, 101856.959, 102516.407, 103143.048, 103792.654, 104452.103, 105173.888, 106181.106, 106735.568, 107237.536, 107736.224, 103415.358, 95167.326, 88438.323, 82555.777, 77477.037, 73162.732, 69333.992, 65862.863, 62677.167, 59740.816, 57063.65, 54550.527, 52142.39, 49921.261, 46735.566, 44780.185, 42962.6, 41217.193, 39465.224, 37769.03, 34570.211, 32998.689, 31456.694, 29940.946, 28513.78, 27129.266, 25784.122, 24478.347, 23202.1, 21955.381, 20728.347, 19609.581, 18480.972, 17329.397, 16272.966, 15272.31, 14330.709, 13392.389, 9163.386, 8425.197, 6686.352, 5711.942, 4498.032, 3759.843, 3064.305, 2329.396, 1220.472, 1250];
// console.log(`Elevations count: ${elevations.length}`);

// const coordinates = [
//   [-83.01093333333333, 39.999826666666664], [-83.01090666666667, 39.999826666666664], [-83.01092, 39.99986666666667], [-83.01093333333333, 39.99984666666667], [-83.00178666666666, 39.996766666666666], [-82.96934666666667, 39.98901333333333], [-82.91389333333333, 39.97624], [-82.84548, 39.96426], [-82.74928, 39.97296], [-82.64858666666666, 39.97832], [-82.53105333333333, 39.98054], [-82.40194666666666, 39.98560666666667], [-82.41041333333334, 39.985953333333335], [-82.39318666666667, 39.985153333333336], [-82.37582666666667, 39.984853333333334], [-82.35672, 39.984633333333335], [-82.3366, 39.98327333333334], [-82.31614666666667, 39.98151333333333], [-82.27401333333333, 39.97912], [-82.25302666666667, 39.97788], [-82.23290666666666, 39.97556], [-82.21333333333334, 39.971713333333334], [-82.19346666666667, 39.97194666666667], [-82.17386666666667, 39.97270666666667], [-82.15354666666667, 39.97456666666667], [-82.13144, 39.97522], [-82.11076, 39.974293333333335], [-82.08921333333333, 39.973106666666666], [-82.03441333333333, 39.97376], [-82.01377333333333, 39.97450666666667], [-81.97589333333333, 39.9795], [-81.95669333333333, 39.98139333333334], [-81.93681333333333, 39.98432666666667], [-81.91557333333333, 39.987593333333336], [-81.87657333333334, 39.99024], [-81.85888, 39.98972], [-81.84384, 39.98940666666667], [-81.82912, 39.98954], [-81.81349333333333, 39.988933333333335], [-81.7974, 39.98753333333333], [-81.78153333333333, 39.9862], [-81.76881333333333, 39.986646666666665], [-81.75853333333333, 39.98692], [-81.74857333333334, 39.98811333333333], [-81.73614666666667, 39.988746666666664], [-81.72478666666666, 39.98847333333333], [-81.71768, 39.9875], [-81.71133333333333, 39.986466666666665], [-81.70566666666667, 39.985353333333336], [-81.70001333333333, 39.98538666666666], [-81.68201333333333, 39.98790666666667], [-81.67428, 39.98917333333333], [-81.66374666666667, 39.987766666666666], [-81.65956, 39.98476], [-81.65774666666667, 39.98220666666667], [-81.65333333333334, 39.9801], [-81.65006666666666, 39.97872], [-81.64688, 39.97688], [-81.64888, 39.97234666666667], [-81.65166666666667, 39.97232], [-81.6512, 39.975073333333334], [-81.65034666666666, 39.97598], [-81.64796, 39.97736666666667], [-81.64877333333334, 39.977113333333335], [-81.6482, 39.97738], [-81.64790666666667, 39.978093333333334], [-81.64762666666667, 39.979573333333335], [-81.64648, 39.98058], [-81.64597333333333, 39.98118], [-81.64436, 39.98102], [-81.64944, 39.98248], [-81.65034666666666, 39.98314666666667], [-81.65258666666666, 39.98446666666667], [-81.65318666666667, 39.986626666666666], [-81.65446666666666, 39.98642], [-81.65458666666666, 39.9852], [-81.65596, 39.981006666666666], [-81.65954666666667, 39.97951333333334], [-81.6662, 39.97875333333333], [-81.67245333333334, 39.98032666666667], [-81.68217333333334, 39.98603333333333], [-81.6864, 39.98784], [-81.6964, 39.99106666666667], [-81.6988, 39.99254], [-81.71122666666666, 40.00058666666666], [-81.71065333333334, 40.00198], [-81.71256, 40.00436], [-81.714, 40.004706666666664], [-81.7128, 40.00644666666667], [-81.71014666666667, 40.0079], [-81.70642666666667, 40.008473333333335], [-81.70306666666667, 40.00948666666667], [-81.70017333333334, 40.009926666666665], [-81.699, 40.008426666666665], [-81.69917333333333, 40.008406666666666], [-81.70094666666667, 40.00836666666667], [-81.70444, 40.009433333333334], [-81.70946666666667, 40.01326], [-81.71236, 40.016153333333335], [-81.71030666666667, 40.01638], [-81.71250666666667, 40.019133333333336], [-81.71736, 40.018366666666665], [-81.71805333333333, 40.01860666666666], [-81.71685333333333, 40.01936666666667], [-81.71576, 40.02066], [-81.71726666666666, 40.02058666666667], [-81.71312, 40.01888666666667], [-81.70418666666667, 40.017986666666665], [-81.69742666666667, 40.01782], [-81.68596, 40.018926666666665], [-81.67397333333334, 40.01996666666667], [-81.65805333333333, 40.01926], [-81.62865333333333, 40.02076666666667], [-81.60742666666667, 40.02438], [-81.5858, 40.027], [-81.56477333333333, 40.027586666666664], [-81.54296, 40.02885333333333], [-81.52262666666667, 40.0312], [-81.48718666666667, 40.02936], [-81.46833333333333, 40.02874], [-81.4492, 40.02708666666667], [-81.4308, 40.02486666666667], [-81.41410666666667, 40.023786666666666], [-81.39784, 40.02187333333333], [-81.38169333333333, 40.020626666666665], [-81.36432, 40.01892], [-81.34762666666667, 40.01812666666667], [-81.33212, 40.01901333333333], [-81.31778666666666, 40.019513333333336], [-81.30310666666666, 40.01998666666667], [-81.28902666666667, 40.020226666666666], [-81.27576, 40.021226666666664], [-81.26296, 40.022373333333334], [-81.2512, 40.022533333333335], [-81.24086666666666, 40.02116], [-81.23229333333333, 40.01815333333333], [-81.19526666666667, 40.00176], [-81.18802666666667, 39.99862], [-81.17525333333333, 39.994013333333335], [-81.17109333333333, 39.992693333333335], [-81.16696, 39.992893333333335], [-81.16413333333334, 39.99308666666667], [-81.16101333333333, 39.99257333333333], [-81.15809333333333, 39.99162], [-81.15457333333333, 39.99016666666667], [-81.15458666666666, 39.99014666666667]
// ];
// console.log(`Coordinates count: ${coordinates.length}`);

// const MapComponent = () => {
//   const mapContainer = useRef<HTMLDivElement | null>(null);
//   const mapRef = useRef<mapboxgl.Map | null>(null);
//   const [isStandardStyle, setIsStandardStyle] = useState(true);

//   // Function to add 3D buildings
//   const add3DBuildings = () => {
//     if (!mapRef.current) return;
    
//     mapRef.current.addLayer({
//       id: 'add-3d-buildings',
//       source: 'composite',
//       'source-layer': 'building',
//       filter: ['==', 'extrude', 'true'],
//       type: 'fill-extrusion',
//       minzoom: 15,
//       paint: {
//         'fill-extrusion-color': '#aaa',
//         'fill-extrusion-height': [
//           'interpolate',
//           ['linear'],
//           ['zoom'],
//           15, 0,
//           15.05, ['get', 'height']
//         ],
//         'fill-extrusion-base': [
//           'interpolate',
//           ['linear'],
//           ['zoom'],
//           15, 0,
//           15.05, ['get', 'min_height']
//         ],
//         'fill-extrusion-opacity': 0.7
//       }
//     });
//   };
   
//   // Function to add terrain
//   const addTerrain = () => {
//     if (!mapRef.current) return;

//     mapRef.current.addSource('mapbox-dem', {
//       type: 'raster-dem',
//       url: 'mapbox://mapbox.mapbox-terrain-dem-v1',
//       tileSize: 512,
//       maxzoom: 14
//     });
//     mapRef.current.setTerrain({ source: 'mapbox-dem', exaggeration: 1.5 });
//   };

//   const addElevatedLine = () => {
//     if (!mapRef.current) return;

//     // Add the GeoJSON source with your coordinates and elevations
//     mapRef.current.addSource('geojson', {
//       type: 'geojson',
//       lineMetrics: true,
//       data: {
//         type: 'Feature',
//         properties: {
//           elevation: elevations
//         },
//         geometry: {
//           coordinates: coordinates,
//           type: 'LineString'
//         }
//       }
//     });

//     // Add the elevated line layer
//     mapRef.current.addLayer({
//       id: 'elevated-line',
//       type: 'line',
//       source: 'geojson',
//       layout: {
//         'line-z-offset': [
//           'at-interpolated',
//           [
//             '*',
//             ['line-progress'],
//             ['-', ['length', ['get', 'elevation']], 1]
//           ],
//           ['get', 'elevation']
//         ],
//         'line-elevation-reference': 'sea'
//       },
//       paint: {
//         'line-emissive-strength': 1.0,
//         'line-width': 8,
//         'line-color': 'royalblue'
//       }
//     });
//   };

//   useEffect(() => {
//     mapboxgl.accessToken = 'pk.eyJ1IjoicmtlZyIsImEiOiJjbWJwa3Q4dmwwNjZyMmtxNG4zZHpub21xIn0.5IQ061SZLu_F4_ptyu-Sbg';

//     if (!mapContainer.current) return;

//     mapRef.current = new mapboxgl.Map({
//       container: mapContainer.current,
//       style: 'mapbox://styles/mapbox/standard',
//       center: [-74.006, 40.7128],
//       zoom: 15.5,
//       pitch: 45,
//       bearing: -17.6
//     });

//     mapRef.current.addControl(new mapboxgl.NavigationControl(), 'bottom-right');

//     // Handle initial load
//     mapRef.current.on('load', () => {
//       add3DBuildings();
//     });

//     // Handle style changes
//     mapRef.current.on('style.load', () => {
//       addTerrain();
//       add3DBuildings();
//       addElevatedLine();
//     });

//     return () => mapRef.current?.remove();
//   }, []);

//   const toggleMapStyle = () => {
//     if (!mapRef.current) return;
    
//     const newStyle = isStandardStyle 
//       ? 'mapbox://styles/mapbox/satellite-streets-v12' 
//       : 'mapbox://styles/mapbox/standard';
    
//     mapRef.current.setStyle(newStyle);
//     setIsStandardStyle(!isStandardStyle);
//   };

//   return (
//     <div style={{ position: 'relative', height: '100%', width: '100%' }}>
//       <div ref={mapContainer} style={{ height: '100%', width: '100%' }} />
//       <button 
//         onClick={toggleMapStyle}
//         style={{ position: 'absolute', top: '10px', left: '10px', zIndex: 1 }}
//       >
//         {isStandardStyle ? 'Satellite' : 'Standard'}
//       </button>
//     </div>
//   );
// };

// export default MapComponent;

/* 3D Map + toggle between satellite and standard view + terrain extrusion + 3D line route */
// import { useEffect, useRef, useState } from 'react';
// import mapboxgl from 'mapbox-gl';

// import 'mapbox-gl/dist/mapbox-gl.css';

// const elevations = [738.189, 754.593, 757.874, 734.908, 2949.475, 7762.467, 12004.594, 15902.231, 20118.111, 23802.494, 27877.297, 32598.426, 32322.836, 32831.366, 33280.841, 33835.303, 34379.922, 34917.98, 36046.589, 36676.51, 37293.308, 38054.463, 38848.426, 39543.965, 40249.345, 40898.951, 41499.345, 42089.896, 43700.789, 44353.676, 45754.595, 46479.66, 47201.445, 47870.736, 49064.962, 49665.356, 50318.243, 50994.096, 51699.477, 52378.611, 53005.251, 53694.227, 54379.923, 55154.201, 55898.952, 56646.983, 57306.432, 57982.285, 58736.879, 59452.102, 61217.194, 61902.889, 62929.792, 63645.015, 64356.957, 65049.215, 65738.191, 66446.853, 67526.249, 68290.685, 70662.732, 71394.359, 72122.706, 72854.333, 73585.96, 74324.149, 75098.428, 75869.425, 76607.614, 77372.05, 79235.567, 79954.071, 80695.541, 81492.785, 82273.625, 82985.567, 84452.102, 85252.627, 86348.428, 87106.302, 88674.544, 89461.945, 91030.187, 91804.465, 98018.376, 98736.88, 100492.129, 101184.386, 101856.959, 102516.407, 103143.048, 103792.654, 104452.103, 105173.888, 106181.106, 106735.568, 107237.536, 107736.224, 103415.358, 95167.326, 88438.323, 82555.777, 77477.037, 73162.732, 69333.992, 65862.863, 62677.167, 59740.816, 57063.65, 54550.527, 52142.39, 49921.261, 46735.566, 44780.185, 42962.6, 41217.193, 39465.224, 37769.03, 34570.211, 32998.689, 31456.694, 29940.946, 28513.78, 27129.266, 25784.122, 24478.347, 23202.1, 21955.381, 20728.347, 19609.581, 18480.972, 17329.397, 16272.966, 15272.31, 14330.709, 13392.389, 9163.386, 8425.197, 6686.352, 5711.942, 4498.032, 3759.843, 3064.305, 2329.396, 1220.472, 1250].map(elevation => elevation * 0.3048);
// console.log(`Elevations count: ${elevations.length}`);

// const coordinates = [
//   [-83.01093333333333, 39.999826666666664], [-83.01090666666667, 39.999826666666664], [-83.01092, 39.99986666666667], [-83.01093333333333, 39.99984666666667], [-83.00178666666666, 39.996766666666666], [-82.96934666666667, 39.98901333333333], [-82.91389333333333, 39.97624], [-82.84548, 39.96426], [-82.74928, 39.97296], [-82.64858666666666, 39.97832], [-82.53105333333333, 39.98054], [-82.40194666666666, 39.98560666666667], [-82.41041333333334, 39.985953333333335], [-82.39318666666667, 39.985153333333336], [-82.37582666666667, 39.984853333333334], [-82.35672, 39.984633333333335], [-82.3366, 39.98327333333334], [-82.31614666666667, 39.98151333333333], [-82.27401333333333, 39.97912], [-82.25302666666667, 39.97788], [-82.23290666666666, 39.97556], [-82.21333333333334, 39.971713333333334], [-82.19346666666667, 39.97194666666667], [-82.17386666666667, 39.97270666666667], [-82.15354666666667, 39.97456666666667], [-82.13144, 39.97522], [-82.11076, 39.974293333333335], [-82.08921333333333, 39.973106666666666], [-82.03441333333333, 39.97376], [-82.01377333333333, 39.97450666666667], [-81.97589333333333, 39.9795], [-81.95669333333333, 39.98139333333334], [-81.93681333333333, 39.98432666666667], [-81.91557333333333, 39.987593333333336], [-81.87657333333334, 39.99024], [-81.85888, 39.98972], [-81.84384, 39.98940666666667], [-81.82912, 39.98954], [-81.81349333333333, 39.988933333333335], [-81.7974, 39.98753333333333], [-81.78153333333333, 39.9862], [-81.76881333333333, 39.986646666666665], [-81.75853333333333, 39.98692], [-81.74857333333334, 39.98811333333333], [-81.73614666666667, 39.988746666666664], [-81.72478666666666, 39.98847333333333], [-81.71768, 39.9875], [-81.71133333333333, 39.986466666666665], [-81.70566666666667, 39.985353333333336], [-81.70001333333333, 39.98538666666666], [-81.68201333333333, 39.98790666666667], [-81.67428, 39.98917333333333], [-81.66374666666667, 39.987766666666666], [-81.65956, 39.98476], [-81.65774666666667, 39.98220666666667], [-81.65333333333334, 39.9801], [-81.65006666666666, 39.97872], [-81.64688, 39.97688], [-81.64888, 39.97234666666667], [-81.65166666666667, 39.97232], [-81.6512, 39.975073333333334], [-81.65034666666666, 39.97598], [-81.64796, 39.97736666666667], [-81.64877333333334, 39.977113333333335], [-81.6482, 39.97738], [-81.64790666666667, 39.978093333333334], [-81.64762666666667, 39.979573333333335], [-81.64648, 39.98058], [-81.64597333333333, 39.98118], [-81.64436, 39.98102], [-81.64944, 39.98248], [-81.65034666666666, 39.98314666666667], [-81.65258666666666, 39.98446666666667], [-81.65318666666667, 39.986626666666666], [-81.65446666666666, 39.98642], [-81.65458666666666, 39.9852], [-81.65596, 39.981006666666666], [-81.65954666666667, 39.97951333333334], [-81.6662, 39.97875333333333], [-81.67245333333334, 39.98032666666667], [-81.68217333333334, 39.98603333333333], [-81.6864, 39.98784], [-81.6964, 39.99106666666667], [-81.6988, 39.99254], [-81.71122666666666, 40.00058666666666], [-81.71065333333334, 40.00198], [-81.71256, 40.00436], [-81.714, 40.004706666666664], [-81.7128, 40.00644666666667], [-81.71014666666667, 40.0079], [-81.70642666666667, 40.008473333333335], [-81.70306666666667, 40.00948666666667], [-81.70017333333334, 40.009926666666665], [-81.699, 40.008426666666665], [-81.69917333333333, 40.008406666666666], [-81.70094666666667, 40.00836666666667], [-81.70444, 40.009433333333334], [-81.70946666666667, 40.01326], [-81.71236, 40.016153333333335], [-81.71030666666667, 40.01638], [-81.71250666666667, 40.019133333333336], [-81.71736, 40.018366666666665], [-81.71805333333333, 40.01860666666666], [-81.71685333333333, 40.01936666666667], [-81.71576, 40.02066], [-81.71726666666666, 40.02058666666667], [-81.71312, 40.01888666666667], [-81.70418666666667, 40.017986666666665], [-81.69742666666667, 40.01782], [-81.68596, 40.018926666666665], [-81.67397333333334, 40.01996666666667], [-81.65805333333333, 40.01926], [-81.62865333333333, 40.02076666666667], [-81.60742666666667, 40.02438], [-81.5858, 40.027], [-81.56477333333333, 40.027586666666664], [-81.54296, 40.02885333333333], [-81.52262666666667, 40.0312], [-81.48718666666667, 40.02936], [-81.46833333333333, 40.02874], [-81.4492, 40.02708666666667], [-81.4308, 40.02486666666667], [-81.41410666666667, 40.023786666666666], [-81.39784, 40.02187333333333], [-81.38169333333333, 40.020626666666665], [-81.36432, 40.01892], [-81.34762666666667, 40.01812666666667], [-81.33212, 40.01901333333333], [-81.31778666666666, 40.019513333333336], [-81.30310666666666, 40.01998666666667], [-81.28902666666667, 40.020226666666666], [-81.27576, 40.021226666666664], [-81.26296, 40.022373333333334], [-81.2512, 40.022533333333335], [-81.24086666666666, 40.02116], [-81.23229333333333, 40.01815333333333], [-81.19526666666667, 40.00176], [-81.18802666666667, 39.99862], [-81.17525333333333, 39.994013333333335], [-81.17109333333333, 39.992693333333335], [-81.16696, 39.992893333333335], [-81.16413333333334, 39.99308666666667], [-81.16101333333333, 39.99257333333333], [-81.15809333333333, 39.99162], [-81.15457333333333, 39.99016666666667], [-81.15458666666666, 39.99014666666667]
// ];
// console.log(`Coordinates count: ${coordinates.length}`);

// const MapComponent = () => {
//   const mapContainer = useRef<HTMLDivElement | null>(null);
//   const mapRef = useRef<mapboxgl.Map | null>(null);
//   const [isStandardStyle, setIsStandardStyle] = useState(true);

//   // Function to add terrain
//   const addTerrain = () => {
//     if (!mapRef.current) return;

//     mapRef.current.addSource('mapbox-dem', {
//       type: 'raster-dem',
//       url: 'mapbox://mapbox.mapbox-terrain-dem-v1',
//       tileSize: 512,
//       maxzoom: 14
//     });
//     mapRef.current.setTerrain({ source: 'mapbox-dem', exaggeration: 1.5 });
//   };

//   const add2DLine = () => {
//     if (!mapRef.current) return;
  
//     mapRef.current.addSource('route-geojson', {
//       type: 'geojson',
//       data: {
//         type: 'Feature',
//         properties: {},
//         geometry: {
//           coordinates: coordinates,
//           type: 'LineString'
//         }
//       }
//     });
  
//     mapRef.current.addLayer({
//       id: 'route-line',
//       type: 'line',
//       source: 'route-geojson',
//       paint: {
//         'line-width': 6,
//         'line-color': 'royalblue',
//         'line-opacity': 0.3
//       }
//     });
//   };

//   const addElevatedLine = () => {
//     if (!mapRef.current) return;

//    // Add the GeoJSON source with your coordinates and elevations
//     mapRef.current.addSource('geojson', {
//       type: 'geojson',
//       lineMetrics: true,
//       data: {
//         type: 'Feature',
//         properties: {
//           elevation: elevations
//         },
//         geometry: {
//           coordinates: coordinates,
//           type: 'LineString'
//         }
//       }
//     });

//     // Add the elevated line layer
//     mapRef.current.addLayer({
//       id: 'elevated-line',
//       type: 'line',
//       source: 'geojson',
//       layout: {
//         'line-z-offset': [
//           'at-interpolated',
//           [
//             '*',
//             ['line-progress'],
//             ['-', ['length', ['get', 'elevation']], 1]
//           ],
//           ['get', 'elevation']
//         ],
//         'line-elevation-reference': 'sea'
//       },
//       paint: {
//         'line-emissive-strength': 1.0,
//         'line-width': 8,
//         'line-color': 'royalblue'
//       }
//     });
//   };

//   useEffect(() => {
//     mapboxgl.accessToken = 'pk.eyJ1IjoicmtlZyIsImEiOiJjbWJwa3Q4dmwwNjZyMmtxNG4zZHpub21xIn0.5IQ061SZLu_F4_ptyu-Sbg';

//     if (!mapContainer.current) return;
//     // 'mapbox://styles/mapbox/standard'
//     mapRef.current = new mapboxgl.Map({
//       container: mapContainer.current,
//       style: 'mapbox://styles/mapbox/streets-v12',
//       center: [coordinates[0][0], coordinates[0][1]], // Center on the first coordinate
//       // 15.5
//       zoom: 8,
//       // 45
//       pitch: 45,
//       // -17.6
//       bearing: -17.6,
//       // Disable stuff for 2D
//       //pitchWithRotate: false,
//       //dragRotate: false,
//       //touchPitch: false,
//     });

//     mapRef.current.addControl(new mapboxgl.NavigationControl(), 'bottom-right');

//     // Handle initial load
//     mapRef.current.on('load', () => {
//       add2DLine();
//       addElevatedLine();
//     });

//     // Handle style changes
//     mapRef.current.on('style.load', () => {
//       addTerrain();
//       add2DLine();
//       addElevatedLine();
//     });

//     return () => mapRef.current?.remove();
//   }, []);

//   const toggleMapStyle = () => {
//     if (!mapRef.current) return;
    
//     const newStyle = isStandardStyle 
//       ? 'mapbox://styles/mapbox/satellite-streets-v12' 
//       : 'mapbox://styles/mapbox/streets-v12';

//     mapRef.current.setStyle(newStyle);
//     setIsStandardStyle(!isStandardStyle);
//   };

//   return (
//     <div style={{ position: 'relative', height: '100%', width: '100%' }}>
//       <div ref={mapContainer} style={{ height: '100%', width: '100%' }} />
//       <button 
//         onClick={toggleMapStyle}
//         style={{ position: 'absolute', top: '10px', left: '10px', zIndex: 1 }}
//       >
//         {isStandardStyle ? 'Satellite' : 'Standard'}
//       </button>
//     </div>
//   );
// };

// export default MapComponent;

/* Trying for vertical lines */
// import { useEffect, useRef, useState } from 'react';
// import mapboxgl from 'mapbox-gl';

// import 'mapbox-gl/dist/mapbox-gl.css';

// const elevations = [738.189, 754.593, 757.874, 734.908, 2949.475, 7762.467, 12004.594, 15902.231, 20118.111, 23802.494, 27877.297, 32598.426, 32322.836, 32831.366, 33280.841, 33835.303, 34379.922, 34917.98, 36046.589, 36676.51, 37293.308, 38054.463, 38848.426, 39543.965, 40249.345, 40898.951, 41499.345, 42089.896, 43700.789, 44353.676, 45754.595, 46479.66, 47201.445, 47870.736, 49064.962, 49665.356, 50318.243, 50994.096, 51699.477, 52378.611, 53005.251, 53694.227, 54379.923, 55154.201, 55898.952, 56646.983, 57306.432, 57982.285, 58736.879, 59452.102, 61217.194, 61902.889, 62929.792, 63645.015, 64356.957, 65049.215, 65738.191, 66446.853, 67526.249, 68290.685, 70662.732, 71394.359, 72122.706, 72854.333, 73585.96, 74324.149, 75098.428, 75869.425, 76607.614, 77372.05, 79235.567, 79954.071, 80695.541, 81492.785, 82273.625, 82985.567, 84452.102, 85252.627, 86348.428, 87106.302, 88674.544, 89461.945, 91030.187, 91804.465, 98018.376, 98736.88, 100492.129, 101184.386, 101856.959, 102516.407, 103143.048, 103792.654, 104452.103, 105173.888, 106181.106, 106735.568, 107237.536, 107736.224, 103415.358, 95167.326, 88438.323, 82555.777, 77477.037, 73162.732, 69333.992, 65862.863, 62677.167, 59740.816, 57063.65, 54550.527, 52142.39, 49921.261, 46735.566, 44780.185, 42962.6, 41217.193, 39465.224, 37769.03, 34570.211, 32998.689, 31456.694, 29940.946, 28513.78, 27129.266, 25784.122, 24478.347, 23202.1, 21955.381, 20728.347, 19609.581, 18480.972, 17329.397, 16272.966, 15272.31, 14330.709, 13392.389, 9163.386, 8425.197, 6686.352, 5711.942, 4498.032, 3759.843, 3064.305, 2329.396, 1220.472, 1250].map(elevation => elevation * 0.3048);
// console.log(`Elevations count: ${elevations.length}`);

// const coordinates = [
//   [-83.01093333333333, 39.999826666666664], [-83.01090666666667, 39.999826666666664], [-83.01092, 39.99986666666667], [-83.01093333333333, 39.99984666666667], [-83.00178666666666, 39.996766666666666], [-82.96934666666667, 39.98901333333333], [-82.91389333333333, 39.97624], [-82.84548, 39.96426], [-82.74928, 39.97296], [-82.64858666666666, 39.97832], [-82.53105333333333, 39.98054], [-82.40194666666666, 39.98560666666667], [-82.41041333333334, 39.985953333333335], [-82.39318666666667, 39.985153333333336], [-82.37582666666667, 39.984853333333334], [-82.35672, 39.984633333333335], [-82.3366, 39.98327333333334], [-82.31614666666667, 39.98151333333333], [-82.27401333333333, 39.97912], [-82.25302666666667, 39.97788], [-82.23290666666666, 39.97556], [-82.21333333333334, 39.971713333333334], [-82.19346666666667, 39.97194666666667], [-82.17386666666667, 39.97270666666667], [-82.15354666666667, 39.97456666666667], [-82.13144, 39.97522], [-82.11076, 39.974293333333335], [-82.08921333333333, 39.973106666666666], [-82.03441333333333, 39.97376], [-82.01377333333333, 39.97450666666667], [-81.97589333333333, 39.9795], [-81.95669333333333, 39.98139333333334], [-81.93681333333333, 39.98432666666667], [-81.91557333333333, 39.987593333333336], [-81.87657333333334, 39.99024], [-81.85888, 39.98972], [-81.84384, 39.98940666666667], [-81.82912, 39.98954], [-81.81349333333333, 39.988933333333335], [-81.7974, 39.98753333333333], [-81.78153333333333, 39.9862], [-81.76881333333333, 39.986646666666665], [-81.75853333333333, 39.98692], [-81.74857333333334, 39.98811333333333], [-81.73614666666667, 39.988746666666664], [-81.72478666666666, 39.98847333333333], [-81.71768, 39.9875], [-81.71133333333333, 39.986466666666665], [-81.70566666666667, 39.985353333333336], [-81.70001333333333, 39.98538666666666], [-81.68201333333333, 39.98790666666667], [-81.67428, 39.98917333333333], [-81.66374666666667, 39.987766666666666], [-81.65956, 39.98476], [-81.65774666666667, 39.98220666666667], [-81.65333333333334, 39.9801], [-81.65006666666666, 39.97872], [-81.64688, 39.97688], [-81.64888, 39.97234666666667], [-81.65166666666667, 39.97232], [-81.6512, 39.975073333333334], [-81.65034666666666, 39.97598], [-81.64796, 39.97736666666667], [-81.64877333333334, 39.977113333333335], [-81.6482, 39.97738], [-81.64790666666667, 39.978093333333334], [-81.64762666666667, 39.979573333333335], [-81.64648, 39.98058], [-81.64597333333333, 39.98118], [-81.64436, 39.98102], [-81.64944, 39.98248], [-81.65034666666666, 39.98314666666667], [-81.65258666666666, 39.98446666666667], [-81.65318666666667, 39.986626666666666], [-81.65446666666666, 39.98642], [-81.65458666666666, 39.9852], [-81.65596, 39.981006666666666], [-81.65954666666667, 39.97951333333334], [-81.6662, 39.97875333333333], [-81.67245333333334, 39.98032666666667], [-81.68217333333334, 39.98603333333333], [-81.6864, 39.98784], [-81.6964, 39.99106666666667], [-81.6988, 39.99254], [-81.71122666666666, 40.00058666666666], [-81.71065333333334, 40.00198], [-81.71256, 40.00436], [-81.714, 40.004706666666664], [-81.7128, 40.00644666666667], [-81.71014666666667, 40.0079], [-81.70642666666667, 40.008473333333335], [-81.70306666666667, 40.00948666666667], [-81.70017333333334, 40.009926666666665], [-81.699, 40.008426666666665], [-81.69917333333333, 40.008406666666666], [-81.70094666666667, 40.00836666666667], [-81.70444, 40.009433333333334], [-81.70946666666667, 40.01326], [-81.71236, 40.016153333333335], [-81.71030666666667, 40.01638], [-81.71250666666667, 40.019133333333336], [-81.71736, 40.018366666666665], [-81.71805333333333, 40.01860666666666], [-81.71685333333333, 40.01936666666667], [-81.71576, 40.02066], [-81.71726666666666, 40.02058666666667], [-81.71312, 40.01888666666667], [-81.70418666666667, 40.017986666666665], [-81.69742666666667, 40.01782], [-81.68596, 40.018926666666665], [-81.67397333333334, 40.01996666666667], [-81.65805333333333, 40.01926], [-81.62865333333333, 40.02076666666667], [-81.60742666666667, 40.02438], [-81.5858, 40.027], [-81.56477333333333, 40.027586666666664], [-81.54296, 40.02885333333333], [-81.52262666666667, 40.0312], [-81.48718666666667, 40.02936], [-81.46833333333333, 40.02874], [-81.4492, 40.02708666666667], [-81.4308, 40.02486666666667], [-81.41410666666667, 40.023786666666666], [-81.39784, 40.02187333333333], [-81.38169333333333, 40.020626666666665], [-81.36432, 40.01892], [-81.34762666666667, 40.01812666666667], [-81.33212, 40.01901333333333], [-81.31778666666666, 40.019513333333336], [-81.30310666666666, 40.01998666666667], [-81.28902666666667, 40.020226666666666], [-81.27576, 40.021226666666664], [-81.26296, 40.022373333333334], [-81.2512, 40.022533333333335], [-81.24086666666666, 40.02116], [-81.23229333333333, 40.01815333333333], [-81.19526666666667, 40.00176], [-81.18802666666667, 39.99862], [-81.17525333333333, 39.994013333333335], [-81.17109333333333, 39.992693333333335], [-81.16696, 39.992893333333335], [-81.16413333333334, 39.99308666666667], [-81.16101333333333, 39.99257333333333], [-81.15809333333333, 39.99162], [-81.15457333333333, 39.99016666666667], [-81.15458666666666, 39.99014666666667]
// ];
// console.log(`Coordinates count: ${coordinates.length}`);
// const coord = coordinates[0];

// const MapComponent = () => {
//   const mapContainer = useRef<HTMLDivElement | null>(null);
//   const mapRef = useRef<mapboxgl.Map | null>(null);
//   const [isStandardStyle, setIsStandardStyle] = useState(true);


//   // Function to add terrain
//   const addTerrain = () => {
//     if (!mapRef.current) return;

//     mapRef.current.addSource('mapbox-dem', {
//       type: 'raster-dem',
//       url: 'mapbox://mapbox.mapbox-terrain-dem-v1',
//       tileSize: 512,
//       maxzoom: 14
//     });
//     mapRef.current.setTerrain({ source: 'mapbox-dem', exaggeration: 1.5 });
//   };

// //   const addVerticalLine = () => {
// //   if (!mapRef.current) return;

// //   // Create a very small polygon at the coordinate
// //   const smallOffset = 0.0001; // Very small offset to create a tiny square
  
// //   mapRef.current.addSource('vertical-line', {
// //     type: 'geojson',
// //     data: {
// //       type: 'Feature',
// //       properties: {},
// //       geometry: {
// //         type: 'Polygon',
// //         coordinates: [[
// //           [coord[0] - smallOffset, coord[1] - smallOffset],
// //           [coord[0] + smallOffset, coord[1] - smallOffset],
// //           [coord[0] + smallOffset, coord[1] + smallOffset],
// //           [coord[0] - smallOffset, coord[1] + smallOffset],
// //           [coord[0] - smallOffset, coord[1] - smallOffset]
// //         ]]
// //       }
// //     }
// //   });

// //   mapRef.current.addLayer({
// //     id: 'vertical-line',
// //     type: 'fill-extrusion',
// //     source: 'vertical-line',
// //     paint: {
// //       'fill-extrusion-color': '#ff0000',
// //       'fill-extrusion-height': 1524,
// //       'fill-extrusion-base': 0,
// //       'fill-extrusion-opacity': 1.0
// //     }
// //   });
// // };

//   const addVerticalLine = () => {
//   if (!mapRef.current) return;

//   // Create a circular polygon by generating points around a circle
//   const radius = 0.001; // Adjust this to change the cylinder thickness
//   const segments = 16; // Number of segments to approximate the circle
//   const circleCoords = [];
  
//   for (let i = 0; i <= segments; i++) {
//     const angle = (i / segments) * 2 * Math.PI;
//     const x = coordinates[10][0] + radius * Math.cos(angle);
//     const y = coordinates[10][1] + radius * Math.sin(angle);
//     circleCoords.push([x, y]);
//   }

//   console.log('Coordinates[10]:', coordinates[10]);
//   console.log('Elevations[10]:', elevations[10]);
//   console.log('Map center:', [coord[0], coord[1]]);
  
//   mapRef.current.addSource('vertical-line', {
//     type: 'geojson',
//     data: {
//       type: 'Feature',
//       properties: {},
//       geometry: {
//         type: 'Polygon',
//         coordinates: [circleCoords]
//       }
//     }
//   });

//   mapRef.current.addLayer({
//     id: 'vertical-line',
//     type: 'fill-extrusion',
//     source: 'vertical-line',
//     paint: {
//       // 14147.50521
//       'fill-extrusion-color': '#f00',
//       'fill-extrusion-height': elevations[10] * 1.665,
//       'fill-extrusion-base': 0,
//       'fill-extrusion-opacity': 0.8
//     }
//   });

//   // Add some debugging
//   console.log('Vertical cylinder added at coordinates:', coordinates[10]);
// };

//   const add2DLine = () => {
//     if (!mapRef.current) return;
  
//     mapRef.current.addSource('route-geojson', {
//       type: 'geojson',
//       data: {
//         type: 'Feature',
//         properties: {},
//         geometry: {
//           coordinates: coordinates,
//           type: 'LineString'
//         }
//       }
//     });
  
//     mapRef.current.addLayer({
//       id: 'route-line',
//       type: 'line',
//       source: 'route-geojson',
//       paint: {
//         'line-width': 6,
//         'line-color': 'royalblue',
//         'line-opacity': 0.3
//       }
//     });
//   };

//   const addElevatedLine = () => {
//     if (!mapRef.current) return;

//    // Add the GeoJSON source with your coordinates and elevations
//     mapRef.current.addSource('geojson', {
//       type: 'geojson',
//       lineMetrics: true,
//       data: {
//         type: 'Feature',
//         properties: {
//           elevation: elevations
//         },
//         geometry: {
//           coordinates: coordinates,
//           type: 'LineString'
//         }
//       }
//     });

//     // Add the elevated line layer
//     mapRef.current.addLayer({
//       id: 'elevated-line',
//       type: 'line',
//       source: 'geojson',
//       layout: {
//         'line-z-offset': [
//           'at-interpolated',
//           [
//             '*',
//             ['line-progress'],
//             ['-', ['length', ['get', 'elevation']], 1]
//           ],
//           ['get', 'elevation']
//         ],
//         'line-elevation-reference': 'sea'
//       },
//       paint: {
//         'line-emissive-strength': 1.0,
//         'line-width': 8,
//         'line-color': 'royalblue'
//       }
//     });
//   };

//   useEffect(() => {
//     mapboxgl.accessToken = 'pk.eyJ1IjoicmtlZyIsImEiOiJjbWJwa3Q4dmwwNjZyMmtxNG4zZHpub21xIn0.5IQ061SZLu_F4_ptyu-Sbg';

//     if (!mapContainer.current) return;
//     // 'mapbox://styles/mapbox/standard'
//     mapRef.current = new mapboxgl.Map({
//       container: mapContainer.current,
//       style: 'mapbox://styles/mapbox/streets-v12',
//       center: [coordinates[10][0], coordinates[10][1]], // Center on the first coordinate
//       // 15.5
//       zoom: 12,
//       // 45
//       pitch: 60,
//       // -17.6
//       bearing: -17.6,
//       // Disable stuff for 2D
//       //pitchWithRotate: false,
//       //dragRotate: false,
//       //touchPitch: false,
//     });

//     mapRef.current.addControl(new mapboxgl.NavigationControl(), 'bottom-right');

//     // Handle initial load
//     mapRef.current.on('load', () => {
//       add2DLine();
//       addElevatedLine();
//       addVerticalLine();
//     });

//     // Handle style changes
//     mapRef.current.on('style.load', () => {
//       addTerrain();
//       add2DLine();
//       addElevatedLine();
//       addVerticalLine();
//     });

//     return () => mapRef.current?.remove();
//   }, []);

//   const toggleMapStyle = () => {
//     if (!mapRef.current) return;
    
//     const newStyle = isStandardStyle 
//       ? 'mapbox://styles/mapbox/satellite-streets-v12' 
//       : 'mapbox://styles/mapbox/streets-v12';

//     mapRef.current.setStyle(newStyle);
//     setIsStandardStyle(!isStandardStyle);
//   };

//   return (
//     <div style={{ position: 'relative', height: '100%', width: '100%' }}>
//       <div ref={mapContainer} style={{ height: '100%', width: '100%' }} />
//       <button 
//         onClick={toggleMapStyle}
//         style={{ position: 'absolute', top: '10px', left: '10px', zIndex: 1 }}
//       >
//         {isStandardStyle ? 'Satellite' : 'Standard'}
//       </button>
//     </div>
//   );
// };

// export default MapComponent;

/* part 2 vertical lines all */
import { useEffect, useRef, useState } from 'react';
import mapboxgl from 'mapbox-gl';
import { Threebox } from 'threebox-plugin'; 
import 'mapbox-gl/dist/mapbox-gl.css';

const exaggeration = 1.5;
const elevations = [738.189, 754.593, 757.874, 734.908, 2949.475, 7762.467, 12004.594, 15902.231, 20118.111, 23802.494, 27877.297, 32598.426, 32322.836, 32831.366, 33280.841, 33835.303, 34379.922, 34917.98, 36046.589, 36676.51, 37293.308, 38054.463, 38848.426, 39543.965, 40249.345, 40898.951, 41499.345, 42089.896, 43700.789, 44353.676, 45754.595, 46479.66, 47201.445, 47870.736, 49064.962, 49665.356, 50318.243, 50994.096, 51699.477, 52378.611, 53005.251, 53694.227, 54379.923, 55154.201, 55898.952, 56646.983, 57306.432, 57982.285, 58736.879, 59452.102, 61217.194, 61902.889, 62929.792, 63645.015, 64356.957, 65049.215, 65738.191, 66446.853, 67526.249, 68290.685, 70662.732, 71394.359, 72122.706, 72854.333, 73585.96, 74324.149, 75098.428, 75869.425, 76607.614, 77372.05, 79235.567, 79954.071, 80695.541, 81492.785, 82273.625, 82985.567, 84452.102, 85252.627, 86348.428, 87106.302, 88674.544, 89461.945, 91030.187, 91804.465, 98018.376, 98736.88, 100492.129, 101184.386, 101856.959, 102516.407, 103143.048, 103792.654, 104452.103, 105173.888, 106181.106, 106735.568, 107237.536, 107736.224, 103415.358, 95167.326, 88438.323, 82555.777, 77477.037, 73162.732, 69333.992, 65862.863, 62677.167, 59740.816, 57063.65, 54550.527, 52142.39, 49921.261, 46735.566, 44780.185, 42962.6, 41217.193, 39465.224, 37769.03, 34570.211, 32998.689, 31456.694, 29940.946, 28513.78, 27129.266, 25784.122, 24478.347, 23202.1, 21955.381, 20728.347, 19609.581, 18480.972, 17329.397, 16272.966, 15272.31, 14330.709, 13392.389, 9163.386, 8425.197, 6686.352, 5711.942, 4498.032, 3759.843, 3064.305, 2329.396, 1220.472, 1250].map(elevation => elevation * 0.3048 * exaggeration);
console.log(`Elevations count: ${elevations.length}`);

const coordinates = [
  [-83.01093333333333, 39.999826666666664], [-83.01090666666667, 39.999826666666664], [-83.01092, 39.99986666666667], [-83.01093333333333, 39.99984666666667], [-83.00178666666666, 39.996766666666666], [-82.96934666666667, 39.98901333333333], [-82.91389333333333, 39.97624], [-82.84548, 39.96426], [-82.74928, 39.97296], [-82.64858666666666, 39.97832], [-82.53105333333333, 39.98054], [-82.40194666666666, 39.98560666666667], [-82.41041333333334, 39.985953333333335], [-82.39318666666667, 39.985153333333336], [-82.37582666666667, 39.984853333333334], [-82.35672, 39.984633333333335], [-82.3366, 39.98327333333334], [-82.31614666666667, 39.98151333333333], [-82.27401333333333, 39.97912], [-82.25302666666667, 39.97788], [-82.23290666666666, 39.97556], [-82.21333333333334, 39.971713333333334], [-82.19346666666667, 39.97194666666667], [-82.17386666666667, 39.97270666666667], [-82.15354666666667, 39.97456666666667], [-82.13144, 39.97522], [-82.11076, 39.974293333333335], [-82.08921333333333, 39.973106666666666], [-82.03441333333333, 39.97376], [-82.01377333333333, 39.97450666666667], [-81.97589333333333, 39.9795], [-81.95669333333333, 39.98139333333334], [-81.93681333333333, 39.98432666666667], [-81.91557333333333, 39.987593333333336], [-81.87657333333334, 39.99024], [-81.85888, 39.98972], [-81.84384, 39.98940666666667], [-81.82912, 39.98954], [-81.81349333333333, 39.988933333333335], [-81.7974, 39.98753333333333], [-81.78153333333333, 39.9862], [-81.76881333333333, 39.986646666666665], [-81.75853333333333, 39.98692], [-81.74857333333334, 39.98811333333333], [-81.73614666666667, 39.988746666666664], [-81.72478666666666, 39.98847333333333], [-81.71768, 39.9875], [-81.71133333333333, 39.986466666666665], [-81.70566666666667, 39.985353333333336], [-81.70001333333333, 39.98538666666666], [-81.68201333333333, 39.98790666666667], [-81.67428, 39.98917333333333], [-81.66374666666667, 39.987766666666666], [-81.65956, 39.98476], [-81.65774666666667, 39.98220666666667], [-81.65333333333334, 39.9801], [-81.65006666666666, 39.97872], [-81.64688, 39.97688], [-81.64888, 39.97234666666667], [-81.65166666666667, 39.97232], [-81.6512, 39.975073333333334], [-81.65034666666666, 39.97598], [-81.64796, 39.97736666666667], [-81.64877333333334, 39.977113333333335], [-81.6482, 39.97738], [-81.64790666666667, 39.978093333333334], [-81.64762666666667, 39.979573333333335], [-81.64648, 39.98058], [-81.64597333333333, 39.98118], [-81.64436, 39.98102], [-81.64944, 39.98248], [-81.65034666666666, 39.98314666666667], [-81.65258666666666, 39.98446666666667], [-81.65318666666667, 39.986626666666666], [-81.65446666666666, 39.98642], [-81.65458666666666, 39.9852], [-81.65596, 39.981006666666666], [-81.65954666666667, 39.97951333333334], [-81.6662, 39.97875333333333], [-81.67245333333334, 39.98032666666667], [-81.68217333333334, 39.98603333333333], [-81.6864, 39.98784], [-81.6964, 39.99106666666667], [-81.6988, 39.99254], [-81.71122666666666, 40.00058666666666], [-81.71065333333334, 40.00198], [-81.71256, 40.00436], [-81.714, 40.004706666666664], [-81.7128, 40.00644666666667], [-81.71014666666667, 40.0079], [-81.70642666666667, 40.008473333333335], [-81.70306666666667, 40.00948666666667], [-81.70017333333334, 40.009926666666665], [-81.699, 40.008426666666665], [-81.69917333333333, 40.008406666666666], [-81.70094666666667, 40.00836666666667], [-81.70444, 40.009433333333334], [-81.70946666666667, 40.01326], [-81.71236, 40.016153333333335], [-81.71030666666667, 40.01638], [-81.71250666666667, 40.019133333333336], [-81.71736, 40.018366666666665], [-81.71805333333333, 40.01860666666666], [-81.71685333333333, 40.01936666666667], [-81.71576, 40.02066], [-81.71726666666666, 40.02058666666667], [-81.71312, 40.01888666666667], [-81.70418666666667, 40.017986666666665], [-81.69742666666667, 40.01782], [-81.68596, 40.018926666666665], [-81.67397333333334, 40.01996666666667], [-81.65805333333333, 40.01926], [-81.62865333333333, 40.02076666666667], [-81.60742666666667, 40.02438], [-81.5858, 40.027], [-81.56477333333333, 40.027586666666664], [-81.54296, 40.02885333333333], [-81.52262666666667, 40.0312], [-81.48718666666667, 40.02936], [-81.46833333333333, 40.02874], [-81.4492, 40.02708666666667], [-81.4308, 40.02486666666667], [-81.41410666666667, 40.023786666666666], [-81.39784, 40.02187333333333], [-81.38169333333333, 40.020626666666665], [-81.36432, 40.01892], [-81.34762666666667, 40.01812666666667], [-81.33212, 40.01901333333333], [-81.31778666666666, 40.019513333333336], [-81.30310666666666, 40.01998666666667], [-81.28902666666667, 40.020226666666666], [-81.27576, 40.021226666666664], [-81.26296, 40.022373333333334], [-81.2512, 40.022533333333335], [-81.24086666666666, 40.02116], [-81.23229333333333, 40.01815333333333], [-81.19526666666667, 40.00176], [-81.18802666666667, 39.99862], [-81.17525333333333, 39.994013333333335], [-81.17109333333333, 39.992693333333335], [-81.16696, 39.992893333333335], [-81.16413333333334, 39.99308666666667], [-81.16101333333333, 39.99257333333333], [-81.15809333333333, 39.99162], [-81.15457333333333, 39.99016666666667], [-81.15458666666666, 39.99014666666667]
];
console.log(`Coordinates count: ${coordinates.length}`);
const coord = coordinates[0];

const MapComponent = () => {
  const mapContainer = useRef<HTMLDivElement | null>(null);
  const mapRef = useRef<mapboxgl.Map | null>(null);
  const [isStandardStyle, setIsStandardStyle] = useState(true);
const tbRef = useRef<any>(null); // Add reference for Threebox

  // Function to initialize Threebox
  const initThreebox = () => {
    if (!mapRef.current) return;

    tbRef.current = new Threebox(
      mapRef.current,
      mapRef.current.getCanvas().getContext('webgl'),
      {
        defaultLights: true,
        enableSelectingObjects: true,
        enableDraggingObjects: true,
        enableRotatingObjects: true
      }
    );

    mapRef.current.addLayer({
      id: 'custom-threebox-model',
      type: 'custom',
      renderingMode: '3d',
      onAdd: function () {
        // Layer added
      },
      render: function () {
        tbRef.current.update();
      }
    });
  };

  // Function to draw 3D line using Threebox
  const draw3dLineThreebox = () => {
    if (!tbRef.current) return;

    // Create coordinates with elevation data [lng, lat, elevation]
    const coordsWithElevation = coordinates.map((coord, index) => [
      coord[0], // longitude
      coord[1], // latitude  
      elevations[index] // elevation (already includes exaggeration)
    ]);

    const intervalMeters = 10000 * 0.3048 * exaggeration; // 4572 meters with exaggeration
  let lastVerticalElevation = 0;

    for (let i = 1; i < coordsWithElevation.length; i++) {
      // Draw the segment in space
      const lineSegment = tbRef.current.line({
        geometry: [
          [coordsWithElevation[i][0], coordsWithElevation[i][1], coordsWithElevation[i][2]],
          [coordsWithElevation[i - 1][0], coordsWithElevation[i - 1][1], coordsWithElevation[i - 1][2]]
        ],
        color: '#dd0000',
        width: 6,
        opacity: 1
      });
      
      tbRef.current.add(lineSegment);

const currentElevation = coordsWithElevation[i - 1][2];
    if (currentElevation - lastVerticalElevation >= intervalMeters) {
      const lineVertical = tbRef.current.line({
        geometry: [
          [coordsWithElevation[i - 1][0], coordsWithElevation[i - 1][1], coordsWithElevation[i - 1][2]],
          [coordsWithElevation[i - 1][0], coordsWithElevation[i - 1][1], 0] // Drop to elevation 0
        ],
        color: '#00ff00', // Green color to distinguish from main line
        width: 2,
        opacity: 0.7
      });
      
      tbRef.current.add(lineVertical);
      lastVerticalElevation = currentElevation;
    }
  }

    console.log(`Added ${coordsWithElevation.length - 1} 3D line segments using Threebox`);
  };


  // Function to add terrain
  const addTerrain = () => {
    if (!mapRef.current) return;

    mapRef.current.addSource('mapbox-dem', {
      type: 'raster-dem',
      url: 'mapbox://mapbox.mapbox-terrain-dem-v1',
      tileSize: 512,
      maxzoom: 14
    });
    mapRef.current.setTerrain({ source: 'mapbox-dem', exaggeration: exaggeration });
  };

const addVerticalLine = () => {
  if (!mapRef.current) return;

  // Create a vertical line by using coordinates very close together
  // This gives the line minimal horizontal distance but makes it visible
  const baseCoord = coordinates[10];
  const offset = 0.001; // Very small offset to make line visible
  const verticalCoords = [
    baseCoord,
    [baseCoord[0] + offset, baseCoord[1]] // Tiny horizontal offset
  ];
  
  mapRef.current.addSource('vertical-line', {
    type: 'geojson',
    lineMetrics: true,
    data: {
      type: 'Feature',
      properties: {
        elevation: [0, (elevations[10] * 1.75)] // Start at 0, end at the elevation
      },
      geometry: {
        coordinates: verticalCoords,
        type: 'LineString'
      }
    }
  });

  mapRef.current.addLayer({
    id: 'vertical-line',
    type: 'line',
    source: 'vertical-line',
    layout: {
      'line-z-offset': [
        'at-interpolated',
        [
          '*',
          ['line-progress'],
          ['-', ['length', ['get', 'elevation']], 1]
        ],
        ['get', 'elevation']
      ],
      'line-elevation-reference': 'sea'
    },
    paint: {
      'line-emissive-strength': 1.0,
      'line-width': 8,
      'line-color': '#ff0000',
      'line-opacity': 0.8
    }
  });

  console.log('Vertical line added at coordinates:', coordinates[10]);
  console.log('From elevation 0 to:', elevations[10]);
};

const addVerticalLines = () => {
  if (!mapRef.current) return;

  // Create vertical lines for every other coordinate (every 2nd point)
  for (let i = 0; i < coordinates.length; i += 2) {
    const baseCoord = coordinates[i];
    const offset = 0.001; // Very small offset to make line visible
    const verticalCoords = [
      baseCoord,
      [baseCoord[0] + offset, baseCoord[1]] // Tiny horizontal offset
    ];
    
    mapRef.current.addSource(`vertical-line-${i}`, {
      type: 'geojson',
      lineMetrics: true,
      data: {
        type: 'Feature',
        properties: {
          elevation: [0, (elevations[i] * 1.75)] // Start at 0, end at the elevation
        },
        geometry: {
          coordinates: verticalCoords,
          type: 'LineString'
        }
      }
    });

    mapRef.current.addLayer({
      id: `vertical-line-${i}`,
      type: 'line',
      source: `vertical-line-${i}`,
      layout: {
        'line-z-offset': [
          'at-interpolated',
          [
            '*',
            ['line-progress'],
            ['-', ['length', ['get', 'elevation']], 1]
          ],
          ['get', 'elevation']
        ],
        'line-elevation-reference': 'sea'
      },
      paint: {
        'line-emissive-strength': 1.0,
        'line-width': 8,
        'line-color': '#ff0000',
        'line-opacity': 0.8
      }
    });
  }

  console.log(`Added ${Math.ceil(coordinates.length / 2)} vertical lines`);
};

//   const addVerticalLine = () => {
//   if (!mapRef.current) return;

//   // Create a circular polygon by generating points around a circle
//   const radius = 0.001; // Adjust this to change the cylinder thickness
//   const segments = 16; // Number of segments to approximate the circle
//   const circleCoords = [];
  
//   for (let i = 0; i <= segments; i++) {
//     const angle = (i / segments) * 2 * Math.PI;
//     const x = coordinates[10][0] + radius * Math.cos(angle);
//     const y = coordinates[10][1] + radius * Math.sin(angle);
//     circleCoords.push([x, y]);
//   }

//   console.log('Coordinates[10]:', coordinates[10]);
//   console.log('Elevations[10]:', elevations[10]);
//   console.log('Map center:', [coord[0], coord[1]]);
  
//   mapRef.current.addSource('vertical-line', {
//     type: 'geojson',
//     data: {
//       type: 'Feature',
//       properties: {},
//       geometry: {
//         type: 'Polygon',
//         coordinates: [circleCoords]
//       }
//     }
//   });

//   mapRef.current.addLayer({
//     id: 'vertical-line',
//     type: 'fill-extrusion',
//     source: 'vertical-line',
//     paint: {
//       // 14147.50521
//       'fill-extrusion-color': '#f00',
//       'fill-extrusion-height': elevations[10],
//       'fill-extrusion-base': 0,
//       'fill-extrusion-opacity': 0.8
//     }
//   });

//   // Add some debugging
//   console.log('Vertical cylinder added at coordinates:', coordinates[10]);
// };

/*
const addAllVerticalLines = () => {
  if (!mapRef.current) return;

  coordinates.forEach((coordinate, index) => {
    // Create a circular polygon by generating points around a circle
    const radius = 0.001; // Adjust this to change the cylinder thickness
    const segments = 16; // Number of segments to approximate the circle
    const circleCoords = [];
    
    for (let i = 0; i <= segments; i++) {
      const angle = (i / segments) * 2 * Math.PI;
      const x = coordinate[0] + radius * Math.cos(angle);
      const y = coordinate[1] + radius * Math.sin(angle);
      circleCoords.push([x, y]);
    }
    
    mapRef.current!.addSource(`vertical-line-${index}`, {
      type: 'geojson',
      data: {
        type: 'Feature',
        properties: {},
        geometry: {
          type: 'Polygon',
          coordinates: [circleCoords]
        }
      }
    });

    mapRef.current!.addLayer({
      id: `vertical-line-${index}`,
      type: 'fill-extrusion',
      source: `vertical-line-${index}`,
      // Remove the layout section entirely
      paint: {
        'fill-extrusion-color': '#ff0000',
        'fill-extrusion-height': [
          '+',
          ['get-elevation'], // This gets terrain height at the location
          elevations[index] * exaggeration  // Add your altitude above terrain
        ],
        'fill-extrusion-base': ['get-elevation'], // Start from terrain level
        'fill-extrusion-opacity': 0.8
      }
    });
  });

  console.log(`Added ${coordinates.length} vertical cylinders`);
};
*/

  const add2DLine = () => {
    if (!mapRef.current) return;
  
    mapRef.current.addSource('route-geojson', {
      type: 'geojson',
      data: {
        type: 'Feature',
        properties: {},
        geometry: {
          coordinates: coordinates,
          type: 'LineString'
        }
      }
    });
  
    mapRef.current.addLayer({
      id: 'route-line',
      type: 'line',
      source: 'route-geojson',
      paint: {
        'line-width': 6,
        'line-color': 'royalblue',
        'line-opacity': 0.3
      }
    });
  };

  /*
  const addElevatedLine = () => {
    if (!mapRef.current) return;

   // Add the GeoJSON source with your coordinates and elevations
    mapRef.current.addSource('geojson', {
      type: 'geojson',
      lineMetrics: true,
      data: {
        type: 'Feature',
        properties: {
          elevation: elevations
        },
        geometry: {
          coordinates: coordinates,
          type: 'LineString'
        }
      }
    });

    // Add the elevated line layer
    mapRef.current.addLayer({
      id: 'elevated-line',
      type: 'line',
      source: 'geojson',
      layout: {
        'line-z-offset': [
          'at-interpolated',
          [
            '*',
            ['line-progress'],
            ['-', ['length', ['get', 'elevation']], 1]
          ],
          ['get', 'elevation']
        ],
        'line-elevation-reference': 'sea'
      },
      paint: {
        'line-emissive-strength': 1.0,
        'line-width': 8,
        'line-color': 'royalblue'
      }
    });
  };
  */

  /*
  const addElevatedLine = () => {
  if (!mapRef.current) return;

  // Add the GeoJSON source with your coordinates and elevations
  mapRef.current.addSource('geojson', {
    type: 'geojson',
    lineMetrics: true,
    data: {
      type: 'Feature',
      properties: {
        elevation: elevations
      },
      geometry: {
        coordinates: coordinates,
        type: 'LineString'
      }
    }
  });

  // Add the elevated line layer
  mapRef.current.addLayer({
    id: 'elevated-line',
    type: 'line',
    source: 'geojson',
    layout: {
      'line-z-offset': [
        'interpolate',
        ['linear'],
        ['line-progress'],
        0, ['at', 0, ['get', 'elevation']],
        1, ['at', ['-', ['length', ['get', 'elevation']], 1], ['get', 'elevation']]
      ],
      'line-elevation-reference': 'sea'
    },
    paint: {
      'line-emissive-strength': 1.0,
      'line-width': 8,
      'line-color': 'royalblue'
    }
  });
};
*/

const addElevatedLine = () => {
  if (!mapRef.current) return;

  // Calculate actual distances between consecutive points
  const calculateDistance = (coord1: number[], coord2: number[]) => {
    const R = 6371000; // Earth's radius in meters
    const dLat = (coord2[1] - coord1[1]) * Math.PI / 180;
    const dLon = (coord2[0] - coord1[0]) * Math.PI / 180;
    const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
              Math.cos(coord1[1] * Math.PI / 180) * Math.cos(coord2[1] * Math.PI / 180) *
              Math.sin(dLon/2) * Math.sin(dLon/2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
    return R * c;
  };

  // Calculate cumulative distances
  const distances = [0]; // Start with 0
  let totalDistance = 0;
  
  for (let i = 1; i < coordinates.length; i++) {
    const segmentDistance = calculateDistance(coordinates[i-1], coordinates[i]);
    totalDistance += segmentDistance;
    distances.push(totalDistance);
  }

  mapRef.current.addSource('geojson', {
    type: 'geojson',
    lineMetrics: true,
    data: {
      type: 'Feature',
      properties: {
        elevation: elevations
      },
      geometry: {
        coordinates: coordinates,
        type: 'LineString'
      }
    }
  });

  // Create interpolation stops based on actual distance ratios
  const interpolationStops: any[] = [];
  for (let i = 0; i < elevations.length; i++) {
    const progress = distances[i] / totalDistance; // Use actual distance ratio
    interpolationStops.push(progress, elevations[i]);
  }

  mapRef.current.addLayer({
    id: 'elevated-line',
    type: 'line',
    source: 'geojson',
    layout: {
      'line-z-offset': [
        'interpolate',
        ['linear'],
        ['line-progress'],
        ...interpolationStops
      ],
      'line-elevation-reference': 'sea'
    },
    paint: {
      'line-emissive-strength': 1.0,
      'line-width': 8,
      'line-color': 'royalblue'
    }
  });
};

 
 /*
 const addElevatedLine = () => {
  if (!mapRef.current) return;

  // Create individual line segments, each with its own elevation
  coordinates.forEach((coordinate, index) => {
    if (index === coordinates.length - 1) return; // Skip the last point
    
    const segmentCoords = [coordinate, coordinates[index + 1]];
    
    mapRef.current!.addSource(`line-segment-${index}`, {
      type: 'geojson',
      data: {
        type: 'Feature',
        properties: {
          elevation: elevations[index] * exaggeration
        },
        geometry: {
          coordinates: segmentCoords,
          type: 'LineString'
        }
      }
    });

    mapRef.current!.addLayer({
      id: `line-segment-${index}`,
      type: 'line',
      source: `line-segment-${index}`,
      layout: {
        'line-z-offset': ['get', 'elevation'],
        'line-elevation-reference': 'sea'
      },
      paint: {
        'line-emissive-strength': 1.0,
        'line-width': 8,
        'line-color': 'royalblue',
        'line-opacity': 0.8
      }
    });
  });
  */

console.log(`Added ${coordinates.length - 1} elevated line segments`);

  useEffect(() => {
    mapboxgl.accessToken = 'pk.eyJ1IjoicmtlZyIsImEiOiJjbWJwa3Q4dmwwNjZyMmtxNG4zZHpub21xIn0.5IQ061SZLu_F4_ptyu-Sbg';

    if (!mapContainer.current) return;
    // 'mapbox://styles/mapbox/standard'
    mapRef.current = new mapboxgl.Map({
      container: mapContainer.current,
      style: 'mapbox://styles/mapbox/streets-v12',
      center: [coordinates[10][0], coordinates[10][1]], // Center on the first coordinate
      // 15.5
      zoom: 12,
      // 45
      pitch: 60,
      // -17.6
      bearing: -17.6,
      // Disable stuff for 2D
      //pitchWithRotate: false,
      //dragRotate: false,
      //touchPitch: false,
    });

    mapRef.current.addControl(new mapboxgl.NavigationControl(), 'bottom-right');

    // Handle initial load
    mapRef.current.on('load', () => {
      add2DLine();
      addElevatedLine();
      //addVerticalLine();
      //addVerticalLines();
      //initThreebox(); // Initialize Threebox
      //draw3dLineThreebox(); // Draw 3D line using Threebox
    });

    // Handle style changes
    mapRef.current.on('style.load', () => {
      addTerrain();
      add2DLine();
      addElevatedLine();
      //addVerticalLine();
      //addVerticalLines();
      /*
    setTimeout(() => {
        initThreebox();
        draw3dLineThreebox();
      }, 100);
      */
    });

    return () => mapRef.current?.remove();
  }, []);

  const toggleMapStyle = () => {
    if (!mapRef.current) return;
    
    const newStyle = isStandardStyle 
      ? 'mapbox://styles/mapbox/satellite-streets-v12' 
      : 'mapbox://styles/mapbox/streets-v12';

    mapRef.current.setStyle(newStyle);
    setIsStandardStyle(!isStandardStyle);
  };

  return (
    <div style={{ position: 'relative', height: '100%', width: '100%' }}>
      <div ref={mapContainer} style={{ height: '100%', width: '100%' }} />
      <button 
        onClick={toggleMapStyle}
        style={{ position: 'absolute', top: '10px', left: '10px', zIndex: 1 }}
      >
        {isStandardStyle ? 'Satellite' : 'Standard'}
      </button>
    </div>
  );
};

export default MapComponent;